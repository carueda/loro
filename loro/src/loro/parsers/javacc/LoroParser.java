/* Generated By:JavaCC: Do not edit this line. LoroParser.java */
        package loro.parsers.javacc;
        import loro.arbol.*;
        import java.util.*;
        class LoroParser implements LoroParserConstants {

/////////////// Grammar stats here /////////////////////////


//////////////////////////////////////////////////////////////////////////
  final public NFuente fuente() throws ParseException {
        NPaquete pq = null;
        NUtiliza utz;
        Vector v_utz = new Vector();
        Nodo n;
        Vector v = new Vector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      pq = paquete();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USES:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      utz = utiliza();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                  v_utz.addElement(utz);
    }
    label_2:
    while (true) {
      n = unidad();
                                  v.addElement(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALGORITHM:
      case CLASS:
      case SPECIFICATION:
      case INTERFACE:
      case METHOD:
      case OBJECT:
      case OPERATION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
                NUtiliza[] a_utz = new NUtiliza[v_utz.size()];
                v_utz.copyInto(a_utz);
                Nodo[] a = new Nodo[v.size()];
                v.copyInto(a);
                {if (true) return ConstructorArbol.crearNFuente(pq, a_utz, a);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NUnidad unidad() throws ParseException {
        NUnidad n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIFICATION:
    case OPERATION:
      n = especificacion();
      break;
    case ALGORITHM:
    case METHOD:
      n = algoritmo();
      break;
    case CLASS:
    case OBJECT:
      n = clase();
      break;
    case INTERFACE:
      n = interface_();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NInterface interface_() throws ParseException {
        Token tini;
        Token tfin;
        TId i;
        TCadenaDoc d = null;

        Vector interfaces = new Vector();
        TNombre inter;

        NDeclDesc[] atrs = null;

        List opers = new ArrayList();
        NEspecificacion op;
    tini = jj_consume_token(INTERFACE);
    i = tid();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      inter = tnombre();
                                            interfaces.addElement(inter);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(92);
        inter = tnombre();
                                                 interfaces.addElement(inter);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case DESCRIPTION:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      d = tdoc();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFICATION:
      case OPERATION:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      op = especificacion();
                                                  opers.add(op);
    }
    tfin = jj_consume_token(END);
    if (jj_2_1(2)) {
      tfin = jj_consume_token(INTERFACE);
    } else {
      ;
    }
                TNombre[] inters = new TNombre[interfaces.size()];
                interfaces.copyInto(inters);

                {if (true) return ConstructorArbol.crearNInterface(tini, i, inters, d, opers, tfin);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NPaquete paquete() throws ParseException {
        Token tini;
        TNombre nom;
    tini = jj_consume_token(PACKAGE);
    nom = tnombre();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      jj_consume_token(91);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNPaquete(tini, nom);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NUtiliza utiliza() throws ParseException {
        Token tini;
        String what;
        TNombre nom;
    tini = jj_consume_token(USES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIFICATION:
      jj_consume_token(SPECIFICATION);
                                  what = "specification";
      break;
    case ALGORITHM:
      jj_consume_token(ALGORITHM);
                                   what = "algorithm";
      break;
    case CLASS:
      jj_consume_token(CLASS);
                                   what = "class";
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    nom = tnombre();
                {if (true) return ConstructorArbol.crearNUtiliza(tini, what, nom);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NClase clase() throws ParseException {
        Token tini;
        Token tfin;
        TId i;
        TCadenaDoc d = null;
        TNombre x = null;

        NDeclDesc[] atrs = null;

        Vector cs = new Vector();
        NConstructor c;

        Vector interfaces = new Vector();
        TNombre inter;

        Vector mets = new Vector();
        NAlgoritmo m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      tini = jj_consume_token(CLASS);
      break;
    case OBJECT:
      tini = jj_consume_token(OBJECT);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    i = tid();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      x = tnombre();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      inter = tnombre();
                                        interfaces.addElement(inter);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        jj_consume_token(92);
        inter = tnombre();
                                              interfaces.addElement(inter);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case DESCRIPTION:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      d = tdoc();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      atrs = declDescs();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      c = constructor();
                                              cs.addElement(c);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALGORITHM:
      case METHOD:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      m = algoritmo();
                                            mets.addElement(m);
    }
    tfin = jj_consume_token(END);
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        tfin = jj_consume_token(CLASS);
        break;
      case OBJECT:
        tfin = jj_consume_token(OBJECT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                TNombre[] inters = new TNombre[interfaces.size()];
                interfaces.copyInto(inters);

                NConstructor[] acs = new NConstructor[cs.size()];
                cs.copyInto(acs);

                NAlgoritmo[] ams = new NAlgoritmo[mets.size()];
                mets.copyInto(ams);

                {if (true) return ConstructorArbol.crearNClase(tini, i, x, inters, d, atrs, acs, ams, tfin);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclDesc[] declDescs() throws ParseException {
        Vector v = new Vector();
        NDeclDesc d;
    d = declDesc();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      jj_consume_token(91);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                                  v.addElement(d);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      d = declDesc();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                  v.addElement(d);
    }
                NDeclDesc[] a = new NDeclDesc[v.size()];
                v.copyInto(a);
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclDesc declDesc() throws ParseException {
        TId i;
        NTipo t;
        TCadenaDoc d = null;
        boolean esConstante = false;
        NExpresion e = null;
        Token c = null;
    i = tid();
    jj_consume_token(93);
    t = ntipo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        e = expresion();
        break;
      case CONSTANT:
        c = jj_consume_token(CONSTANT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          e = expresion();
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
                                                              esConstante = true;
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case STRING_LITERAL:
    case 93:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      d = tdoc();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNDeclDesc(i, t, d, esConstante, e, c);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NConstructor constructor() throws ParseException {
        Token tini;
        Token tfin;
        TCadenaDoc d = null;
        TCadenaDoc e = null;
        NDeclaracion[] ent = null;
        NDeclaracion[] sal = null;
        NDescripcion[] dent = null;
        NAfirmacion pre = null;
        NAfirmacion pos = null;
        Nodo[] a = null;
    tini = jj_consume_token(CONSTRUCTOR);
    jj_consume_token(96);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ent = declaraciones();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(97);
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      d = tdoc();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NADA:
        jj_consume_token(NADA);
        break;
      case ID:
        dent = descripciones();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRE:
      jj_consume_token(PRE);
      pre = afirmacion();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POST:
      jj_consume_token(POST);
      pos = afirmacion();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case DESCRIPTION:
    case STRATEGY:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case STRATEGY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION:
          jj_consume_token(DESCRIPTION);
          break;
        case STRATEGY:
          jj_consume_token(STRATEGY);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      e = tdoc();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    a = acciones();
    tfin = jj_consume_token(END);
    if (jj_2_4(2)) {
      tfin = jj_consume_token(CONSTRUCTOR);
    } else {
      ;
    }
                {if (true) return ConstructorArbol.crearNConstructor(tini, d, ent, dent, pre, pos, e, a, tfin);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NEspecificacion especificacion() throws ParseException {
        Token tini;
        Token tfin;
        TId i;
        TCadenaDoc d = null;
        NDeclaracion[] ent = null;
        NDeclaracion[] sal = null;
        NDescripcion[] dent = null;
        NDescripcion[] dsal = null;
        NAfirmacion pre = null;
        NAfirmacion pos = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECIFICATION:
      tini = jj_consume_token(SPECIFICATION);
      break;
    case OPERATION:
      tini = jj_consume_token(OPERATION);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    i = tid();
    jj_consume_token(96);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ent = declaraciones();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(97);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 98:
      jj_consume_token(98);
      sal = declaraciones();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case DESCRIPTION:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        jj_consume_token(DESCRIPTION);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      d = tdoc();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NADA:
        jj_consume_token(NADA);
        break;
      case ID:
        dent = descripciones();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT:
      jj_consume_token(OUTPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NADA:
        jj_consume_token(NADA);
        break;
      case ID:
        dsal = descripciones();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRE:
      jj_consume_token(PRE);
      pre = afirmacion();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POST:
      jj_consume_token(POST);
      pos = afirmacion();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    tfin = jj_consume_token(END);
    if (jj_2_5(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFICATION:
        tfin = jj_consume_token(SPECIFICATION);
        break;
      case OPERATION:
        tfin = jj_consume_token(OPERATION);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                {if (true) return ConstructorArbol.crearNEspecificacion(
                        tini,
                        i, d, ent, sal, dent, dsal, pre, pos,
                        tfin
                );}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDescripcion[] descripciones() throws ParseException {
        Vector v = new Vector();
        NDescripcion d;
    label_9:
    while (true) {
      d = descripcion();
                            v.addElement(d);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_9;
      }
    }
                NDescripcion[] a = new NDescripcion[v.size()];
                v.copyInto(a);
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDescripcion descripcion() throws ParseException {
        TId i;
        TCadenaDoc d;
    i = tid();
    jj_consume_token(93);
    d = tdoc();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      jj_consume_token(91);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNDescripcion(i, d);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NAlgoritmo algoritmo() throws ParseException {
        Token ti, tf;
        TId id = null;
        TNombre esp;
        NDeclaracion[] ent = null;
        NDeclaracion[] sal = null;
        TCadenaDoc d = null;
        Nodo[] a = null;
        TCadena leng = null;
        TCadena lengAdic = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
      ti = jj_consume_token(ALGORITHM);
      break;
    case METHOD:
      ti = jj_consume_token(METHOD);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = tid();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(FOR);
    esp = tnombre();
    jj_consume_token(96);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ent = declaraciones();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(97);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 98:
      jj_consume_token(98);
      sal = declaraciones();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
    case DESCRIPTION:
    case STRATEGY:
    case BEGIN:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT_DOC:
      case DESCRIPTION:
      case STRATEGY:
      case STRING_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION:
        case STRATEGY:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DESCRIPTION:
            jj_consume_token(DESCRIPTION);
            break;
          case STRATEGY:
            jj_consume_token(STRATEGY);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        d = tdoc();
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(BEGIN);
      a = acciones();
      break;
    case IMPLEMENTATION:
      jj_consume_token(IMPLEMENTATION);
      leng = timpl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPL:
      case STRING_LITERAL:
        lengAdic = timpl();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tf = jj_consume_token(END);
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALGORITHM:
        tf = jj_consume_token(ALGORITHM);
        break;
      case METHOD:
        tf = jj_consume_token(METHOD);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                {if (true) return ConstructorArbol.crearNAlgoritmo(
                        ti,
                        id, esp, d, ent, sal, a,
                        leng, lengAdic,
                        tf
                );}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclaracion[] declaraciones() throws ParseException {
        Vector v = new Vector();
        NDeclaracion[] d;
        int tot = 0;
    d = declaraciones1Tipo();
                tot += d.length;
                v.addElement(d);
    label_10:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(92);
      d = declaraciones1Tipo();
                        tot += d.length;
                        v.addElement(d);
    }
                NDeclaracion[] a = new NDeclaracion[tot];
                int offset = 0;
                for ( int k = 0; k < v.size(); k++ )
                {
                        d = (NDeclaracion[]) v.elementAt(k);
                        System.arraycopy(d, 0, a, offset, d.length);
                        offset += d.length;
                }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclaracion declaracion() throws ParseException {
        TId i;
        NTipo t;
    i = tid();
    jj_consume_token(93);
    t = ntipo();
                {if (true) return ConstructorArbol.crearNDeclaracion(i, t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclaracion[] declaraciones1Tipo() throws ParseException {
        TId[] i;
        NTipo t;
        boolean esConstante = false;
        NExpresion e = null;
        Token c = null;
    i = tids();
    jj_consume_token(93);
    t = ntipo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        e = expresion();
        break;
      case CONSTANT:
        c = jj_consume_token(CONSTANT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          e = expresion();
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
                          esConstante = true;
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
                NDeclaracion[] decl = new NDeclaracion[i.length];
                for ( int k = 0; k < i.length; k++ )
                {
                        decl[k] = ConstructorArbol.crearNDeclaracion(i[k], t, esConstante, e, c);
                }

                {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDeclaracion declaracion1Tipo() throws ParseException {
        TId[] i;
        NTipo t;
        boolean esConstante = false;
        NExpresion e = null;
        Token c = null;
    i = tids();
    jj_consume_token(93);
    t = ntipo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        e = expresion();
        break;
      case CONSTANT:
        c = jj_consume_token(CONSTANT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          e = expresion();
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
                          esConstante = true;
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNDeclaracion(i, t, esConstante, e, c);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NTipo ntipo() throws ParseException {
        NTipo t;
        TNombre nom = null;
        Token ti = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case STRING:
    case CHAR:
    case INT:
    case REAL:
      t = ntipobasico();
      break;
    case 99:
      ti = jj_consume_token(99);
      jj_consume_token(100);
      t = ntipo();
                  t = ConstructorArbol.crearNTipoArreglo(ti, t);
      break;
    case INTERFACE:
      // por ahora obliga palabra clave <INTERFACE>, mientras se completa manejo. 2002-05-24
                      ti = jj_consume_token(INTERFACE);
      nom = tnombre();
                  t = ConstructorArbol.crearNTipoInterface(ti, nom);
      break;
    case ALGORITHM:
      ti = jj_consume_token(ALGORITHM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
        nom = tnombre();
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
                  t = ConstructorArbol.crearNTipoEspecificacion(ti, nom);
      break;
    case CLASS:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ti = jj_consume_token(CLASS);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      nom = tnombre();
                  t = ConstructorArbol.crearNTipoClase(ti, nom);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NTipo ntipobasico() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case REAL:
      t = jj_consume_token(REAL);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ConstructorArbol.crearNTipoBasico(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public Nodo[] acciones() throws ParseException {
        Vector v = new Vector();
        Nodo a;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALGORITHM:
      case LOOP:
      case TRUE:
      case CONTINUE:
      case NEW:
      case THIS:
      case EXISTS:
      case FALSE:
      case TRY:
      case THROW:
      case WHILE:
      case NULL:
      case OBJECT:
      case FOR:
      case FORALL:
      case PRE:
      case REPEAT:
      case RETURN:
      case SWITCH:
      case IF:
      case BREAK:
      case INT_LITERAL:
      case REAL_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case ID:
      case 96:
      case 99:
      case 104:
      case 123:
      case 124:
      case 127:
      case 128:
      case 129:
      case 130:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_11;
      }
      a = accion();
      jj_consume_token(91);
                            v.addElement(a);
    }
                Nodo[] as = new Nodo[v.size()];
                v.copyInto(as);
                {if (true) return as;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public Nodo accion() throws ParseException {
        Nodo n;
    if (jj_2_8(2)) {
      n = declaracion1Tipo();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALGORITHM:
      case TRUE:
      case NEW:
      case THIS:
      case EXISTS:
      case FALSE:
      case NULL:
      case OBJECT:
      case FORALL:
      case PRE:
      case INT_LITERAL:
      case REAL_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case ID:
      case 96:
      case 99:
      case 123:
      case 124:
      case 127:
      case 128:
      case 129:
      case 130:
        n = expresion();
        break;
      case IF:
        n = decision();
        break;
      case SWITCH:
        n = decisionMultiple();
        break;
      case LOOP:
      case WHILE:
      case FOR:
      case REPEAT:
        n = iteracion();
        break;
      case RETURN:
        n = retorne();
        break;
      case TRY:
        n = intente();
        break;
      case THROW:
        n = lance();
        break;
      case 104:
        n = afirmacion();
        break;
      case BREAK:
        n = termine();
        break;
      case CONTINUE:
        n = _continue();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
/**
 * Esta es la produccion para las lineas ingresadas en el Interprete.
 * Es una lista de accionInterprete() separadas por ";" y opcionalmente
 * un ";" al final.  EOF obligatorio.
 * Tambien vacio es posible para permitir linea de comentario solamente.
 */
  final public List accionesInterprete() throws ParseException {
        List list = new ArrayList();
        Object n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
    case LOOP:
    case TRUE:
    case CONTINUE:
    case NEW:
    case THIS:
    case EXISTS:
    case FALSE:
    case TRY:
    case THROW:
    case WHILE:
    case NULL:
    case OBJECT:
    case FOR:
    case FORALL:
    case PRE:
    case REPEAT:
    case RETURN:
    case SWITCH:
    case IF:
    case BREAK:
    case USES:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case ID:
    case 96:
    case 99:
    case 101:
    case 102:
    case 103:
    case 104:
    case 123:
    case 124:
    case 127:
    case 128:
    case 129:
    case 130:
      n = accionInterprete();
                                        list.add(n);
      label_12:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(91);
        n = accionInterprete();
                                                list.add(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(0);
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
/**
 * Esta es la produccion para las lineas ingresadas en el Interprete.
 * Basicamente es accion() o utiliza() finalizando con ";" opcional y
 * EOF obligatorio.
 * Tambien vacio es posible para permitir linea de comentario solamente.
 */
  final public Object accionInterprete() throws ParseException {
        Object n = null;
        Token t, s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
    case LOOP:
    case TRUE:
    case CONTINUE:
    case NEW:
    case THIS:
    case EXISTS:
    case FALSE:
    case TRY:
    case THROW:
    case WHILE:
    case NULL:
    case OBJECT:
    case FOR:
    case FORALL:
    case PRE:
    case REPEAT:
    case RETURN:
    case SWITCH:
    case IF:
    case BREAK:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case ID:
    case 96:
    case 99:
    case 104:
    case 123:
    case 124:
    case 127:
    case 128:
    case 129:
    case 130:
      n = accion();
      break;
    case USES:
      n = utiliza();
      break;
    case 101:
      jj_consume_token(101);
                       n = "?";
      break;
    case 102:
      jj_consume_token(102);
                       n = "??";
      break;
    case 103:
      jj_consume_token(103);
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        s = jj_consume_token(ID);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
                                    n = t.image + (s != null ? " " + s.image : "");
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public Nodo iteracion() throws ParseException {
        Nodo n;
    if (jj_2_10(2)) {
      n = mientras();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        n = para();
        break;
      case REPEAT:
        n = repita();
        break;
      case LOOP:
        n = ciclo();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NAfirmacion afirmacion() throws ParseException {
        Token ti, tf;
        Token tdoc = null;
        NExpresion e = null;
    ti = jj_consume_token(104);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
    case TRUE:
    case NEW:
    case THIS:
    case EXISTS:
    case FALSE:
    case NULL:
    case OBJECT:
    case FORALL:
    case PRE:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case ID:
    case 96:
    case 99:
    case 123:
    case 124:
    case 127:
    case 128:
    case 129:
    case 130:
      e = expresion();
      break;
    case TEXT_DOC:
      tdoc = jj_consume_token(TEXT_DOC);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tf = jj_consume_token(105);
                if ( e != null )
                        {if (true) return ConstructorArbol.crearNAfirmacion(ti, e, tf);}
                else
                        {if (true) return ConstructorArbol.crearNAfirmacion(ti, tdoc, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDecision decision() throws ParseException {
        Token ti, tf;
        NExpresion e;
        Nodo[] as;
        NDecisionSiNoSi sinosi;
        Vector sinosis = new Vector();
        Nodo[] an = null;
    ti = jj_consume_token(IF);
    e = expresion();
    jj_consume_token(THEN);
    as = acciones();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_13;
      }
      sinosi = decision_si_no_si();
                                       sinosis.addElement(sinosi);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      an = acciones();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    tf = jj_consume_token(END);
    if (jj_2_11(2)) {
      tf = jj_consume_token(IF);
    } else {
      ;
    }
                NDecisionSiNoSi[] asinosis = new NDecisionSiNoSi[sinosis.size()];
                sinosis.copyInto(asinosis);
                {if (true) return ConstructorArbol.crearNDecision(ti, e, as, asinosis, an, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDecisionSiNoSi decision_si_no_si() throws ParseException {
        Token ti;
        NExpresion e;
        Nodo[] as;
    ti = jj_consume_token(ELSEIF);
    e = expresion();
    jj_consume_token(THEN);
    as = acciones();
                {if (true) return ConstructorArbol.crearNDecisionSiNoSi(ti, e, as);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NDecisionMultiple decisionMultiple() throws ParseException {
        Token ti, tf;
        Token cti, ctf = null;

        NExpresion e_segun;
        NExpresion e_caso;
        Nodo[] a_caso;
        boolean con_fin_caso = false;
        Vector casos = new Vector();
        NCaso caso_sino = null;
    ti = jj_consume_token(SWITCH);
    e_segun = expresion();
    jj_consume_token(DO);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_14;
      }
      cti = jj_consume_token(CASE);
      e_caso = expresion();
      jj_consume_token(93);
      a_caso = acciones();
      if (jj_2_12(2)) {
        jj_consume_token(END);
        ctf = jj_consume_token(CASE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
                                                                con_fin_caso = true;
      } else {
        ;
      }
                                casos.addElement(
                                        ConstructorArbol.crearNCaso(cti, e_caso, a_caso, con_fin_caso, ctf)
                                );
                                con_fin_caso = false;
                                ctf = null;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      cti = jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      a_caso = acciones();
      if (jj_2_13(2)) {
        jj_consume_token(END);
        ctf = jj_consume_token(CASE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
      } else {
        ;
      }
                                caso_sino = ConstructorArbol.crearNCaso(cti, null, a_caso, true, ctf);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    tf = jj_consume_token(END);
    if (jj_2_14(2)) {
      tf = jj_consume_token(SWITCH);
    } else {
      ;
    }
                NCaso[] css = new NCaso[casos.size()];
                casos.copyInto(css);
                {if (true) return ConstructorArbol.crearNDecisionMultiple(ti, e_segun, css, caso_sino, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NMientras mientras() throws ParseException {
        Token ti, tf;
        TId etq = null;
        NExpresion e;
        Nodo[] a;
    ti = jj_consume_token(WHILE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    e = expresion();
    jj_consume_token(DO);
    a = acciones();
    tf = jj_consume_token(END);
    if (jj_2_15(2)) {
      tf = jj_consume_token(WHILE);
    } else {
      ;
    }
                {if (true) return ConstructorArbol.crearNMientras(ti, etq, e, a, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NIteracion para() throws ParseException {
        Token ti, tf;
        TId etq = null;
        TId i = null;
        NDeclaracion d = null;
        NExpresion ed;
        boolean b = false;
        NExpresion ep = null;
        NExpresion eh;
        NExpresion en;
        Nodo[] a;
    ti = jj_consume_token(FOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    if (jj_2_16(2)) {
      d = declaracion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        i = tid();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ed = expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOWNTO:
        jj_consume_token(DOWNTO);
                                                               b = true;
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STEP:
        jj_consume_token(STEP);
        ep = expresion();
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(TO);
      eh = expresion();
      jj_consume_token(DO);
      a = acciones();
      tf = jj_consume_token(END);
      if (jj_2_17(2)) {
        tf = jj_consume_token(FOR);
      } else {
        ;
      }
                        {if (true) return ConstructorArbol.crearNPara(ti, etq, i, d, ed, b, ep, eh, a, tf);}
      break;
    case IN:
      jj_consume_token(IN);
      en = expresion();
      jj_consume_token(DO);
      a = acciones();
      tf = jj_consume_token(END);
      if (jj_2_18(2)) {
        tf = jj_consume_token(FOR);
      } else {
        ;
      }
                        {if (true) return ConstructorArbol.crearNForEach(ti, etq, i, d, en, a, tf);}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NRepita repita() throws ParseException {
        Token ti;
        TId etq = null;
        Nodo[] a;
        NExpresion e;
    ti = jj_consume_token(REPEAT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    a = acciones();
    jj_consume_token(UNTIL);
    e = expresion();
                {if (true) return ConstructorArbol.crearNRepita(ti, etq, a, e);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NCiclo ciclo() throws ParseException {
        Token ti, tf;
        TId etq = null;
        Nodo[] a;
    ti = jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    a = acciones();
    tf = jj_consume_token(END);
    if (jj_2_19(2)) {
      tf = jj_consume_token(LOOP);
    } else {
      ;
    }
                {if (true) return ConstructorArbol.crearNCiclo(ti, etq, a, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NRetorne retorne() throws ParseException {
        NExpresion[] es = null;
        Token t;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
    case TRUE:
    case NEW:
    case THIS:
    case EXISTS:
    case FALSE:
    case NULL:
    case OBJECT:
    case FORALL:
    case PRE:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case ID:
    case 96:
    case 99:
    case 123:
    case 124:
    case 127:
    case 128:
    case 129:
    case 130:
      es = expresiones();
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
                if ( es == null )
                        es = new NExpresion[0];

                {if (true) return ConstructorArbol.crearNRetorne(t, es);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NTermine termine() throws ParseException {
        Token t;
        TId etq = null;
        NExpresion e = null;
    t = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      e = expresion();
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNTermine(t, etq, e);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NContinue _continue() throws ParseException {
        Token t;
        TId etq = null;
        NExpresion e = null;
    t = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      etq = tid();
      jj_consume_token(106);
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      e = expresion();
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
                {if (true) return ConstructorArbol.crearNContinue(t, etq, e);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NIntente intente() throws ParseException {
        Token ti, tf;
        Token ti2, tf2 = null;
        NDeclaracion d;
        Nodo[] a, ca;
        NAtrape c;
        NAtrape f = null;
        List clist = new ArrayList();
    ti = jj_consume_token(TRY);
    a = acciones();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_15;
      }
      ti2 = jj_consume_token(CATCH);
      jj_consume_token(96);
      d = declaracion();
      jj_consume_token(97);
      ca = acciones();
      if (jj_2_20(2)) {
        jj_consume_token(END);
        tf2 = jj_consume_token(CATCH);
      } else {
        ;
      }
                        clist.add(ConstructorArbol.crearNAtrape(ti2, d, ca, tf2));
                        tf2 = null;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      ti2 = jj_consume_token(FINALLY);
      ca = acciones();
                        f = ConstructorArbol.crearNAtrape(ti2, null, ca, null);
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    tf = jj_consume_token(END);
    if (jj_2_21(2)) {
      tf = jj_consume_token(TRY);
    } else {
      ;
    }
                NAtrape[] cc = (NAtrape[]) clist.toArray(new NAtrape[clist.size()]);
                {if (true) return ConstructorArbol.crearNIntente(ti, a, cc, f, tf);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NLance lance() throws ParseException {
        NExpresion e;
        Token t;
    t = jj_consume_token(THROW);
    e = expresion();
                {if (true) return ConstructorArbol.crearNLance(t, e);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion[] expresiones() throws ParseException {
        Vector es = new Vector();
        NExpresion e;
    e = expresion();
                        es.addElement(e);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_16;
      }
      jj_consume_token(92);
      e = expresion();
                              es.addElement(e);
    }
                NExpresion[] exs = new NExpresion[es.size()];
                es.copyInto(exs);
                {if (true) return exs;}
    throw new Error("Missing return statement in function");
  }

//
// Segmento para expresiones
//

//////////////////////////////////////////////////////////////////////////
  final public NExpresion expresion() throws ParseException {
        NExpresion e, f;
    e = e_cond();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      jj_consume_token(94);
      f = expresion();
                        e = ConstructorArbol.crearNAsignacion(e, f);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_cond() throws ParseException {
        NExpresion e, f = null, g = null;
    e = e_implic();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 107:
      jj_consume_token(107);
      f = expresion();
      jj_consume_token(93);
      g = e_cond();
                        e = ConstructorArbol.crearNCondicion(e, f, g);
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_implic() throws ParseException {
        NExpresion e, f;
    e = e_o();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
      case 109:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        jj_consume_token(108);
        f = e_o();
                                e = ConstructorArbol.crearNEquivalencia(e, f);
        break;
      case 109:
        jj_consume_token(109);
        f = e_o();
                                e = ConstructorArbol.crearNImplicacion(e, f);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_o() throws ParseException {
        NExpresion e, f;
    e = e_y();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_18;
      }
      jj_consume_token(110);
      f = e_y();
                        e = ConstructorArbol.crearNO(e, f);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_y() throws ParseException {
        NExpresion e, f;
    e = e_oarit();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 111:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_19;
      }
      jj_consume_token(111);
      f = e_oarit();
                        e = ConstructorArbol.crearNY(e, f);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_oarit() throws ParseException {
        NExpresion e, f;
    e = e_oexc();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 112:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_20;
      }
      jj_consume_token(112);
      f = e_oexc();
                        e = ConstructorArbol.crearNOArit(e, f);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_oexc() throws ParseException {
        NExpresion e, f;
    e = e_yarit();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 113:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_21;
      }
      jj_consume_token(113);
      f = e_yarit();
                        e = ConstructorArbol.crearNOExc(e, f);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_yarit() throws ParseException {
        NExpresion e, f;
    e = e_igual();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_22;
      }
      jj_consume_token(114);
      f = e_igual();
                        e = ConstructorArbol.crearNYArit(e, f);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_igual() throws ParseException {
        NExpresion e, f;
    e = e_instancia();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
      case 115:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        f = e_instancia();
                        e = ConstructorArbol.crearNIgual(e, f);
        break;
      case 115:
        jj_consume_token(115);
        f = e_instancia();
                        e = ConstructorArbol.crearNDiferente(e, f);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_instancia() throws ParseException {
        NExpresion e;
        NTipo t;
    e = e_rel();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case INSTANCEOF:
    case IMPLEMENTS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        t = ntipo();
                                e = ConstructorArbol.crearNImplementa(e, t);
        break;
      case AS:
        jj_consume_token(AS);
        t = ntipo();
                                e = ConstructorArbol.crearNConvertirTipo(e, t);
        break;
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        t = ntipo();
                                e = ConstructorArbol.crearNEsInstanciaDe(e, t);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_rel() throws ParseException {
        NExpresion e, f;
    e = e_corr();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
      case 117:
      case 118:
      case 119:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        f = e_corr();
                        e = ConstructorArbol.crearNMenor(e, f);
        break;
      case 117:
        jj_consume_token(117);
        f = e_corr();
                        e = ConstructorArbol.crearNMayor(e, f);
        break;
      case 118:
        jj_consume_token(118);
        f = e_corr();
                        e = ConstructorArbol.crearNMenorIgual(e, f);
        break;
      case 119:
        jj_consume_token(119);
        f = e_corr();
                        e = ConstructorArbol.crearNMayorIgual(e, f);
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_corr() throws ParseException {
        NExpresion e, f;
    e = e_sum();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
      case 121:
      case 122:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        jj_consume_token(120);
        f = e_sum();
                        e = ConstructorArbol.crearNCorrIzq(e, f);
        break;
      case 121:
        jj_consume_token(121);
        f = e_sum();
                        e = ConstructorArbol.crearNCorrDer(e, f);
        break;
      case 122:
        jj_consume_token(122);
        f = e_sum();
                        e = ConstructorArbol.crearNCorrDerDer(e, f);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_sum() throws ParseException {
        NExpresion e, f;
    e = e_mul();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
      case 124:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        jj_consume_token(123);
        f = e_mul();
                        e = ConstructorArbol.crearNMas(e, f);
        break;
      case 124:
        jj_consume_token(124);
        f = e_mul();
                        e = ConstructorArbol.crearNMenos(e, f);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_mul() throws ParseException {
        NExpresion e, f;
    e = e_unaria();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
      case 125:
      case 126:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 125:
        jj_consume_token(125);
        f = e_unaria();
                        e = ConstructorArbol.crearNPor(e, f);
        break;
      case 106:
        jj_consume_token(106);
        f = e_unaria();
                        e = ConstructorArbol.crearNDivReal(e, f);
        break;
      case 126:
        jj_consume_token(126);
        f = e_unaria();
                        e = ConstructorArbol.crearNMod(e, f);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_unaria() throws ParseException {
        Token ti;
        NExpresion e;
        NDeclaracion[] d;
        NExpresion con = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 127:
      ti = jj_consume_token(127);
      e = e_unaria();
                                      e = ConstructorArbol.crearNNo(ti, e);
      break;
    case 124:
      ti = jj_consume_token(124);
      e = e_unaria();
                                      e = ConstructorArbol.crearNNeg(ti, e);
      break;
    case 123:
      ti = jj_consume_token(123);
      e = e_unaria();
                                      e = ConstructorArbol.crearNPlus(ti, e);
      break;
    case 128:
      ti = jj_consume_token(128);
      e = e_unaria();
                                      e = ConstructorArbol.crearNNoBit(ti, e);
      break;
    case 129:
      ti = jj_consume_token(129);
      e = e_unaria();
                                      e = ConstructorArbol.crearNCardinalidad(ti, e);
      break;
    case 130:
      ti = jj_consume_token(130);
      e = e_unaria();
                                      e = ConstructorArbol.crearNACadena(ti, e);
      break;
    case ALGORITHM:
    case TRUE:
    case NEW:
    case THIS:
    case FALSE:
    case NULL:
    case OBJECT:
    case PRE:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case ID:
    case 96:
    case 99:
      e = e_primaria();
      break;
    case EXISTS:
    case FORALL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXISTS:
        ti = jj_consume_token(EXISTS);
        break;
      case FORALL:
        ti = jj_consume_token(FORALL);
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      d = declaraciones();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        jj_consume_token(92);
        con = expresion();
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      jj_consume_token(93);
      e = e_unaria();
                        e = ConstructorArbol.crearNCuantificado(ti, d, con, e);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_primaria() throws ParseException {
        Token tf;
        NExpresion e, f;
        NExpresion[] args = null;
        TId i;
    e = e_prefijoPrimaria();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 96:
      case 99:
      case 103:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
        jj_consume_token(103);
        i = tid();
                                e = ConstructorArbol.crearNSubId(e, i);
        break;
      case 99:
        jj_consume_token(99);
        f = expresion();
        tf = jj_consume_token(100);
                                e = ConstructorArbol.crearNSubindexacion(e, f, tf);
        break;
      case 96:
        jj_consume_token(96);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALGORITHM:
        case TRUE:
        case NEW:
        case THIS:
        case EXISTS:
        case FALSE:
        case NULL:
        case OBJECT:
        case FORALL:
        case PRE:
        case INT_LITERAL:
        case REAL_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case ID:
        case 96:
        case 99:
        case 123:
        case 124:
        case 127:
        case 128:
        case 129:
        case 130:
          args = expresiones();
          break;
        default:
          jj_la1[131] = jj_gen;
          ;
        }
        tf = jj_consume_token(97);
                                if ( args == null )
                                        args = new NExpresion[0];
                                e = ConstructorArbol.crearNInvocacion(e, args, tf);
        break;
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_prefijoPrimaria() throws ParseException {
        Token ti, tf;
        NTipo t;
        NExpresion e;
        List list = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case PRE:
    case INT_LITERAL:
    case REAL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
      e = e_const();
      break;
    case THIS:
      e = e_este();
      break;
    case 99:
      ti = jj_consume_token(99);
      /************* pendiente
      		    [
      			   LOOKAHEAD(2)         // for "[" "]"
      			   t=ntipo()
      			]
      			************* pendiente */
                          e = expresion();
                                        list.add(e);
      label_29:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(92);
        e = expresion();
                                                list.add(e);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        jj_consume_token(92);
        break;
      default:
        jj_la1[133] = jj_gen;
        ;
      }
      tf = jj_consume_token(100);
                        e = ConstructorArbol.crearNExpresionArreglo(ti, list, tf);
      break;
    case ID:
      e = e_nombre();
      break;
    case ALGORITHM:
    case OBJECT:
      e = e_qualified_nombre();
      break;
    case 96:
      jj_consume_token(96);
      e = expresion();
      jj_consume_token(97);
      break;
    case NEW:
      e = e_crear();
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_crear() throws ParseException {
        Token ti, tf = null;
        NExpresion e, f, g = null;
        TNombre c;
        NExpresion[] args = null;
    ti = jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      e = expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 131:
        jj_consume_token(131);
        g = expresion();
        break;
      default:
        jj_la1[135] = jj_gen;
        ;
      }
      jj_consume_token(100);
      f = tamanoArreglo();
                        e = ConstructorArbol.crearNCrearArreglo(ti, e, g, f);
      break;
    case ID:
      c = tnombre();
      if (jj_2_23(2)) {
        jj_consume_token(96);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALGORITHM:
        case TRUE:
        case NEW:
        case THIS:
        case EXISTS:
        case FALSE:
        case NULL:
        case OBJECT:
        case FORALL:
        case PRE:
        case INT_LITERAL:
        case REAL_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case ID:
        case 96:
        case 99:
        case 123:
        case 124:
        case 127:
        case 128:
        case 129:
        case 130:
          args = expresiones();
          break;
        default:
          jj_la1[136] = jj_gen;
          ;
        }
        tf = jj_consume_token(97);
      } else {
        ;
      }
                        if ( args == null )
                        {
                                args = new NExpresion[0];
                        }

                        e = ConstructorArbol.crearNCrearObjeto(ti, c, args, tf);
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion tamanoArreglo() throws ParseException {
        Token ti;
        NExpresion e, f, g = null;
        NTipo t;
    if (jj_2_24(2)) {
      // tipo puede comenzar con "["
                      t = ntipo();
                        e = ConstructorArbol.crearNCrearArregloTipoBase(t);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ti = jj_consume_token(99);
        e = expresion();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 131:
          jj_consume_token(131);
          g = expresion();
          break;
        default:
          jj_la1[138] = jj_gen;
          ;
        }
        jj_consume_token(100);
        f = tamanoArreglo();
                        e = ConstructorArbol.crearNCrearArreglo(ti, e, g, f);
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_const() throws ParseException {
        NExpresion e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      e = e_literalEntero();
      break;
    case TRUE:
    case FALSE:
    case PRE:
      e = e_literalBooleano();
      break;
    case REAL_LITERAL:
      e = e_literalReal();
      break;
    case CHAR_LITERAL:
      e = e_literalCaracter();
      break;
    case STRING_LITERAL:
      e = e_literalCadena();
      break;
    case NULL:
      e = e_literalNulo();
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NEste e_este() throws ParseException {
        Token t;
    t = jj_consume_token(THIS);
                {if (true) return ConstructorArbol.crearNEste(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalNulo() throws ParseException {
        Token t;
    t = jj_consume_token(NULL);
                {if (true) return ConstructorArbol.crearNLiteralNulo(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalEntero() throws ParseException {
        Token t;
    t = jj_consume_token(INT_LITERAL);
                {if (true) return ConstructorArbol.crearNLiteralEntero(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalReal() throws ParseException {
        Token t;
    t = jj_consume_token(REAL_LITERAL);
                {if (true) return ConstructorArbol.crearNLiteralReal(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalBooleano() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    case PRE:
      t = jj_consume_token(PRE);
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ConstructorArbol.crearNLiteralBooleano(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalCadena() throws ParseException {
        Token t;
    t = jj_consume_token(STRING_LITERAL);
                {if (true) return ConstructorArbol.crearNLiteralCadena(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_literalCaracter() throws ParseException {
        Token t;
    t = jj_consume_token(CHAR_LITERAL);
                {if (true) return ConstructorArbol.crearNLiteralCaracter(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_id() throws ParseException {
        TId i;
    i = tid();
                {if (true) return ConstructorArbol.crearNId(i);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_nombre() throws ParseException {
        Vector v = new Vector();
        TId t;
    t = tid();
                               v.addElement(t);
    label_30:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_30;
      }
      jj_consume_token(132);
      t = tid();
                                       v.addElement(t);
    }
                int size = v.size();
                if ( size == 1 )
                        {if (true) return ConstructorArbol.crearNId(t);}

                TId[] a = new TId[size];
                v.copyInto(a);
                {if (true) return ConstructorArbol.crearNNombre(a);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public NExpresion e_qualified_nombre() throws ParseException {
        Token ti;
        Vector v = new Vector();
        String what;
        TId t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
      ti = jj_consume_token(ALGORITHM);
                                    what = "algorithm";
      break;
    case OBJECT:
      ti = jj_consume_token(OBJECT);
                                 what = "object";
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = tid();
                               v.addElement(t);
    label_31:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_31;
      }
      jj_consume_token(132);
      t = tid();
                                       v.addElement(t);
    }
                int size = v.size();
                TId[] a = new TId[size];
                v.copyInto(a);
                {if (true) return ConstructorArbol.createNQualifiedName(ti, what, a);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public TId tid() throws ParseException {
        Token t;
    t = jj_consume_token(ID);
                {if (true) return ConstructorArbol.crearTId(t);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public TId tidEOF() throws ParseException {
        TId tid;
    tid = tid();
    jj_consume_token(0);
                {if (true) return tid;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public TId[] tids() throws ParseException {
        Vector v = new Vector();
        TId t;
    t = tid();
                   v.addElement(t);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_32;
      }
      jj_consume_token(92);
      t = tid();
                        v.addElement(t);
    }
                TId[] a = new TId[v.size()];
                v.copyInto(a);
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public TNombre tnombre() throws ParseException {
        Vector v = new Vector();
        TId t;
    t = tid();
                               v.addElement(t);
    label_33:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(132);
      t = tid();
                                       v.addElement(t);
    }
                {if (true) return ConstructorArbol.crearTNombre(v);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
  final public TNombre tnombreEOF() throws ParseException {
        TNombre tnombre;
    tnombre = tnombre();
    jj_consume_token(0);
                {if (true) return tnombre;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
// Literal cadena para info de implementaci?n
  final public TCadena timpl() throws ParseException {
        Token t;
        String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPL:
      t = jj_consume_token(IMPL);
                                 str = t.image.substring(2, t.image.length() -2);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                 str = t.image.substring(1, t.image.length() -1);
      break;
    default:
      jj_la1[144] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ConstructorArbol.crearTCadena(t, str);}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////
// Cadena de documentacion
  final public TCadenaDoc tdoc() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_DOC:
      t = jj_consume_token(TEXT_DOC);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ConstructorArbol.crearTCadenaDoc(t);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(130)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(129)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(128)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(123)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(127)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(USES)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ALGORITHM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(99)) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(96)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(CONSTRUCTOR)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(ALGORITHM)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LOOP)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(LOOP)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(103)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(102)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(101)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(REPEAT)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(99)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(THROW)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  public LoroParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[146];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x41000000,0x41000000,0x0,0x0,0x0,0x10000,0x0,0x0,0x41000000,0x40000000,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x1000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x10000,0x40000,0x0,0x10000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x41f80000,0xf80000,0x31000000,0x31000000,0x0,0x31000000,0x0,0x31000000,0x10000000,0x21010000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x21000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x21000000,0x0,0x21000000,0x0,0x0,0x21000000,0x0,0x21000000,0x0,0x0,0x0,0x20000000,0x20000000,0x1000000,0x0,0x40000,0x10000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8a000800,0x8a000800,0x0,0x8000,0x40,0x40,0x800,0x0,0x800,0x80000000,0x8000,0x0,0x0,0x40,0x40,0x0,0x2,0x8000000,0x80000000,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x40,0x20000000,0x200,0x0,0x0,0x2040,0x2040,0x2040,0x800,0x0,0x0,0x40,0x40,0x20000000,0x200,0x20000000,0x0,0x0,0x0,0x800,0x0,0x0,0x8000000,0x0,0x0,0x0,0x2040,0x2040,0x2040,0x0,0x0,0x602040,0x8000000,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x2000000,0x0,0xd501500c,0xd501500c,0x0,0xd501500c,0x0,0xd501500c,0x0,0xc0015008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x90,0x0,0x0,0xc0015008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800400,0x800400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0xc0015008,0x0,0xc0015008,0x0,0x0,0xc0011008,0x0,0xc0015008,0x0,0x0,0x0,0x40010000,0x10000,0x80000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x2,0x20000,0x8000000,0x1,0x1,0x10000000,0x0,0x0,0x800000,0x1,0x8000000,0x0,0x0,0x0,0x10000000,0x4,0x0,0x800000,0x1000000,0x0,0x0,0x0,0x8000000,0x1000000,0x8000000,0x80000000,0x40000000,0x40000000,0x20000000,0x20800000,0x1000000,0x0,0x1000000,0x0,0x40,0x20,0x0,0x0,0x800000,0x1,0x1000000,0x0,0x0,0x800000,0x1000000,0x0,0x1000000,0x200,0x40,0x20,0x1,0x1000000,0x8000000,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x800000,0x800000,0x8000000,0x800000,0x0,0x80000000,0x40000000,0x40000000,0x80000000,0x40000000,0x40000000,0x4,0x0,0x1000000,0x0,0x1cd0dcc,0x1cd0dcc,0x8000000,0x1cf0dcc,0x1000000,0x1cf0dcc,0x84,0x1cc0048,0x2000,0x1000,0x0,0x8000000,0x20000000,0x8000000,0x1000,0x0,0x0,0x1000000,0x40000000,0x0,0x10,0x40000000,0x0,0x0,0x1cc0048,0x0,0x800,0x0,0x800,0x0,0x4000,0x10000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x10000000,0x1cc0048,0x0,0x1cc0048,0x0,0x10000000,0x1cc0040,0x0,0x1cc0048,0x1000000,0x0,0x0,0xcc0040,0x40,0x0,0x10000000,0x800000,0x800000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x98000109,0x98000109,0x0,0x980001e9,0x0,0x980001e9,0x0,0x98000009,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x98000009,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x800,0x3000,0x3000,0x4000,0x8000,0x10000,0x20000,0x40000,0x80000,0x80000,0x0,0x0,0xf00000,0xf00000,0x7000000,0x7000000,0x18000000,0x18000000,0x60000400,0x60000400,0x0,0x0,0x98000009,0x89,0x98000009,0x89,0x0,0x9,0x0,0x98000009,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x0,0x7,0x0,0x7,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x7,0x0,0x0,0x0,0x8,0x7,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[27];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public LoroParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LoroParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LoroParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LoroParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LoroParser(LoroParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(LoroParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[133];
    for (int i = 0; i < 133; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 146; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 133; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                           }
