/* Generated By:JavaCC: Do not edit this line. LoroIParserTokenManager.java */
package loro.parsers.javacc;
import loro.arbol.*;
import java.util.*;

public class LoroIParserTokenManager implements LoroIParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 125:
         return jjMoveStringLiteralDfa1_5(0x20000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L || (active1 & 0x20000000000L) != 0L)
            return 2;
         if ((active1 & 0x3d00L) != 0L)
         {
            jjmatchedKind = 87;
            return 152;
         }
         if ((active0 & 0x320f800007880000L) != 0L || (active1 & 0x180ffL) != 0L)
         {
            jjmatchedKind = 87;
            return 204;
         }
         if ((active0 & 0xbf8300000L) != 0L)
         {
            jjmatchedKind = 87;
            return 113;
         }
         if ((active0 & 0x200L) != 0L)
            return 15;
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 68;
         }
         if ((active0 & 0xe0000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 176;
         }
         if ((active0 & 0x73c000400000L) != 0L)
         {
            jjmatchedKind = 87;
            return 133;
         }
         if ((active1 & 0x7000000000L) != 0L || (active2 & 0x4L) != 0L)
            return 10;
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 96;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 81;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 175;
         }
         if ((active0 & 0x120000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 132;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 95;
         }
         if ((active0 & 0x7a0fe0087fb80000L) != 0L || (active1 & 0x181ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 204;
         }
         if ((active0 & 0x380000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 112;
         }
         if ((active0 & 0x1c000400000L) != 0L || (active1 & 0x3c00L) != 0L)
            return 204;
         if ((active0 & 0xa0000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 194;
         }
         return -1;
      case 2:
         if ((active0 & 0x7a2ee388fff80000L) != 0L || (active1 & 0x1b9cfL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 204;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 193;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 174;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 94;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 205;
         }
         if ((active0 & 0x300000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 111;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x30L) != 0L)
            return 204;
         return -1;
      case 3:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 3;
            }
            return 192;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 3;
            }
            return 173;
         }
         if ((active0 & 0x3004000088800000L) != 0L || (active1 & 0xeL) != 0L)
            return 204;
         if ((active0 & 0x4a2af39b77780000L) != 0L || (active1 & 0x1b9c1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 3;
            }
            return 204;
         }
         return -1;
      case 4:
         if ((active0 & 0x48a2738327780000L) != 0L || (active1 & 0x1a1c5L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 4;
            }
            return 204;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 4;
            }
            return 172;
         }
         if ((active0 & 0x208801850000000L) != 0L || (active1 & 0x1800L) != 0L)
            return 204;
         return -1;
      case 5:
         if ((active0 & 0x880538305280000L) != 0L || (active1 & 0x1b085L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 204;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 171;
         }
         if ((active0 & 0x4022200022500000L) != 0L || (active1 & 0x140L) != 0L)
            return 204;
         return -1;
      case 6:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 170;
         }
         if ((active0 & 0x80010004000000L) != 0L || (active1 & 0x1a081L) != 0L)
            return 204;
         if ((active0 & 0x800528301280000L) != 0L || (active1 & 0x1004L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 204;
         }
         return -1;
      case 7:
         if ((active0 & 0x120301000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
            return 204;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
            return 169;
         }
         if ((active0 & 0x800408000280000L) != 0L || (active1 & 0x1000L) != 0L)
            return 204;
         return -1;
      case 8:
         if ((active0 & 0x120200000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 8;
            return 204;
         }
         if ((active0 & 0x101000000L) != 0L || (active1 & 0x4L) != 0L)
            return 204;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 8;
            return 168;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000000000L) != 0L)
            return 167;
         if ((active0 & 0x100000000000L) != 0L)
            return 204;
         if ((active0 & 0x20200000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
            return 204;
         }
         return -1;
      case 10:
         if ((active0 & 0x200000000L) != 0L)
            return 204;
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 10;
            return 204;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
            return 204;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 12;
            return 204;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 13;
            return 204;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 128);
      case 37:
         return jjStopAtPos(0, 125);
      case 38:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 95);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         return jjStopAtPos(0, 124);
      case 43:
         return jjStopAtPos(0, 122);
      case 44:
         return jjStopAtPos(0, 91);
      case 45:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x0L);
      case 46:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000000L, 0x4L);
      case 47:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L, 0x8L);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa0080000000000L, 0x0L);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x340000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 106);
      case 64:
         return jjStopAtPos(0, 129);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         return jjStopAtPos(0, 112);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4080000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xbf8300000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x73c000400000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fL, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0xc0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3d00L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L, 0x0L);
      case 123:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 104);
      case 126:
         return jjStopAtPos(0, 127);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 38:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 39:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 46:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 58:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 60:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 61:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 63:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x120c80000c300000L, active1, 0x10fL, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000L, active1, 0x80c0L, active2, 0L);
      case 105:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x801000030000000L, active1, 0x3800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000041000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa0018000400000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x380080000L, active1, 0x10L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x20L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x10000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L, active2, 0L);
      case 123:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 124:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 121);
         break;
      case 63:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x1800L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40800000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000100000L, active1, 0L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 204);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000820000000L, active1, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000001000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20200000000000L, active1, 0x10000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000004000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800000000000L, active1, 0x100L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 204);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000300000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x40L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000L, active1, 0x8006L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 204);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001008000000L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80518000400000L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 204);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 204);
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x806200000L, active1, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000500000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x420000000000L, active1, 0x140L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 204);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000010080000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x1800L);
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 204);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 204);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 204);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 204);
         return jjMoveStringLiteralDfa4_0(active0, 0x8001000000L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x110020000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00340000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 97:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 204);
         return jjMoveStringLiteralDfa5_0(active0, 0x2110000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 204);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 204);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 204);
         return jjMoveStringLiteralDfa5_0(active0, 0x40400000080000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x18000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80028004100000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 204);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 204);
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x2000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 204);
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L, active1, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800200320000000L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 204);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 204);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 204);
         return jjMoveStringLiteralDfa6_0(active0, 0x100080000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10004000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 204);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 204);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 204);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x8080L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 204);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 204);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 204);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 204);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000200000000L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80100000200000L, active1, 0x5L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 204);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 204);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 204);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 204);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 204);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 204);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 204);
         return jjMoveStringLiteralDfa7_0(active0, 0x40108000200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100080000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 204);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20001000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 204);
         break;
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 105:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 204);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 204);
         break;
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 204);
         break;
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 204);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 204);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 204);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 204);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 204);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 204);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 167);
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 204);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 41, 204);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec2 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec8 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec14 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec15 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000L
};
static final long[] jjbitVec18 = {
   0x0L, 0x0L, 0x0L, 0x400000000000000L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 204;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 171:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 113:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 81:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 205:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(8);
                  }
                  break;
               case 174:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 133:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 193:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 176:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 132:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 175:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 111:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 96:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 194:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 112:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 15:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 172:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 68:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 168:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 173:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 192:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 94:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 152:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 169:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 95:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 204:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 167:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 170:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 16:
                  if (curChar == 39 && kind > 85)
                     kind = 85;
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 16);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 28:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 29:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 32:
                  if (curChar == 34 && kind > 86)
                     kind = 86;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 35:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 39 && kind > 87)
                     kind = 87;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(0, 5);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 171:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 182;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 205:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 105)
                     jjAddStates(15, 18);
                  else if (curChar == 115)
                     jjAddStates(19, 22);
                  else if (curChar == 101)
                     jjAddStates(23, 25);
                  else if (curChar == 99)
                     jjAddStates(26, 27);
                  else if (curChar == 100)
                     jjAddStates(28, 29);
                  else if (curChar == 109)
                     jjAddStates(30, 31);
                  else if (curChar == 111)
                     jjAddStates(32, 33);
                  break;
               case 174:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 133:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 144;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 193:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 200;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 176:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 202;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 187;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 194;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 132:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 116)
                     jjCheckNAdd(4);
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 116;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 194:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(16);
                  else if (curChar == 92)
                     jjAddStates(34, 37);
                  break;
               case 172:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 179;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 173:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 184;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 192:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 158;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 180;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 204:
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 178;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 170:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 181;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 101 && kind > 43)
                     kind = 43;
                  break;
               case 5:
                  if (curChar == 116)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(34, 37);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 23:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(40, 43);
                  break;
               case 31:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 60:
                  if (curChar == 111)
                     jjAddStates(32, 33);
                  break;
               case 61:
                  if (curChar == 110 && kind > 63)
                     kind = 63;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 109)
                     jjAddStates(30, 31);
                  break;
               case 77:
                  if (curChar == 111 && kind > 58)
                     kind = 58;
                  break;
               case 78:
               case 82:
                  if (curChar == 100)
                     jjCheckNAdd(77);
                  break;
               case 79:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 83:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 100)
                     jjAddStates(28, 29);
                  break;
               case 87:
                  if (curChar == 110 && kind > 37)
                     kind = 37;
                  break;
               case 88:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 98:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 99)
                     jjAddStates(26, 27);
                  break;
               case 107:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 108:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 115:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 101)
                     jjAddStates(23, 25);
                  break;
               case 121:
                  if (curChar == 110 && kind > 42)
                     kind = 42;
                  break;
               case 122:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 135:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 116)
                     jjCheckNAdd(4);
                  break;
               case 147:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 115)
                     jjAddStates(19, 22);
                  break;
               case 149:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 150:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 154:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 114 && kind > 78)
                     kind = 78;
                  break;
               case 157:
               case 160:
                  if (curChar == 101)
                     jjCheckNAdd(156);
                  break;
               case 158:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 161:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 105)
                     jjAddStates(15, 18);
                  break;
               case 164:
                  if (curChar == 110 && kind > 52)
                     kind = 52;
                  break;
               case 165:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 178:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 122 && kind > 56)
                     kind = 56;
                  break;
               case 190:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 195:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 101 && kind > 56)
                     kind = 56;
                  break;
               case 197:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 171:
               case 43:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 113:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 81:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  break;
               case 205:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(8);
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  break;
               case 174:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 133:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 193:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 176:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 132:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 175:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 111:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 96:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 194:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 112:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 15:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 172:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 68:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 168:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 173:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 192:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 94:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 152:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 161;
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  break;
               case 169:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 95:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 204:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 167:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 170:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(8);
                  break;
               case 29:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               case 42:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 69:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 85:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 97:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 114:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 134:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 153:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 162:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 177:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 204 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_6(0x40000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa1_4(0x10000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x2000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   46, 47, 52, 53, 56, 57, 29, 30, 32, 15, 17, 29, 30, 34, 32, 176, 
   188, 195, 203, 152, 155, 159, 162, 133, 145, 147, 113, 119, 96, 105, 81, 85, 
   68, 75, 18, 19, 21, 23, 12, 13, 31, 33, 35, 37, 50, 51, 54, 55, 
   58, 59, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec2[i1] & l1) != 0L)
            if ((jjbitVec3[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec16[i2] & l2) != 0L);
      default : 
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec17[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec18[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\142\157\157\154\145\141\156\157", 
"\143\141\144\145\156\141", "\143\141\162\141\143\164\145\162", "\145\156\164\145\162\157", 
"\162\145\141\154", "\141\154\147\157\162\151\164\155\157", "\141\164\162\141\160\145", 
"\142\141\152\141\156\144\157", "\143\141\163\157", "\143\151\143\154\157", "\143\151\145\162\164\157", 
"\143\154\141\163\145", "\143\157\155\157", "\143\157\156\163\164\141\156\164\145", 
"\143\157\156\163\164\162\165\143\164\157\162", null, "\143\162\145\141\162", "\144\145\163\144\145", null, "\145\156", 
"\145\156\164\157\156\143\145\163", "\145\156\164\162\141\144\141", 
"\145\163\137\151\156\163\164\141\156\143\151\141\137\144\145", null, null, "\145\163\164\162\141\164\145\147\151\141", 
"\145\170\151\163\164\145", "\145\170\164\151\145\156\144\145", "\146\141\154\163\157", "\146\151\156", 
"\147\154\157\142\141\154", "\150\141\147\141", "\150\141\163\164\141", null, "\151\156\151\143\151\157", 
"\151\155\160\154\145\155\145\156\164\141", "\151\156\164\145\156\164\145", null, "\154\141\156\143\145", null, 
"\155\151\145\156\164\162\141\163", "\156\141\144\141", "\156\165\154\157", "\157\142\152\145\164\157", null, 
"\160\141\161\165\145\164\145", "\160\141\162\141", "\160\141\162\141\137\164\157\144\157", 
"\160\141\163\157", "\160\157\163", "\160\162\145", "\162\145\160\151\164\141", 
"\162\145\164\157\162\156\145", "\163\141\154\151\144\141", null, "\163\151", "\163\151\137\156\157", 
"\163\151\137\156\157\137\163\151", "\163\151\145\155\160\162\145", null, "\164\145\162\155\151\156\145", 
"\165\164\151\154\151\172\141", null, null, null, null, null, null, null, null, null, "\73", "\54", "\72", 
"\72\75", "\75", "\50", "\51", "\55\76", "\133", "\135", "\56\77", "\56\77\77", "\56", 
"\173", "\175", "\57", "\77", "\74\75\76", "\75\76", "\174\174", "\46\46", "\174", 
"\136", "\46", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", 
"\76\76\76", "\53", "\55", "\52", "\45", "\41", "\176", "\43", "\100", "\56\56", "\72\72", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_TEXT_DOC", 
   "IN_GUIDE", 
   "IN_IMPL", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff0001L, 0xfffffffffce7ffffL, 0xfL, 
};
static final long[] jjtoSkip = {
   0x703eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8fc0L, 0x0L, 0x0L, 
};
static private SimpleCharStream input_stream;
static private final int[] jjrounds = new int[204];
static private final int[] jjstateSet = new int[408];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public LoroIParserTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public LoroIParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 204; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
