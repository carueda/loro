/* Generated By:JavaCC: Do not edit this line. LoroParserConstants.java */
package loro.parsers.javacc;

public interface LoroParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 12;
  int FORMAL_COMMENT = 13;
  int MULTI_LINE_COMMENT = 14;
  int TEXT_DOC = 16;
  int GUIDE = 17;
  int IMPL = 18;
  int BOOLEAN = 19;
  int STRING = 20;
  int CHAR = 21;
  int INT = 22;
  int REAL = 23;
  int ALGORITHM = 24;
  int CATCH = 25;
  int CASE = 26;
  int LOOP = 27;
  int TRUE = 28;
  int CLASS = 29;
  int AS = 30;
  int CONSTANT = 31;
  int CONSTRUCTOR = 32;
  int CONTINUE = 33;
  int NEW = 34;
  int FROM = 35;
  int TO = 36;
  int DESCRIPTION = 37;
  int IN = 38;
  int THEN = 39;
  int INPUT = 40;
  int INSTANCEOF = 41;
  int SPECIFICATION = 42;
  int THIS = 43;
  int STRATEGY = 44;
  int EXISTS = 45;
  int EXTENDS = 46;
  int FALSE = 47;
  int END = 48;
  int GLOBAL = 49;
  int DO = 50;
  int UNTIL = 51;
  int IMPLEMENTATION = 52;
  int BEGIN = 53;
  int IMPLEMENTS = 54;
  int TRY = 55;
  int INTERFACE = 56;
  int THROW = 57;
  int METHOD = 58;
  int WHILE = 59;
  int NULL = 60;
  int OBJECT = 61;
  int OPERATION = 62;
  int PACKAGE = 63;
  int FOR = 64;
  int DOWNTO = 65;
  int BY = 66;
  int FORALL = 67;
  int POST = 68;
  int PRE = 69;
  int REPEAT = 70;
  int RETURN = 71;
  int OUTPUT = 72;
  int SWITCH = 73;
  int IF = 74;
  int ELSE = 75;
  int ELSEIF = 76;
  int FINALLY = 77;
  int SUPER = 78;
  int BREAK = 79;
  int USES = 80;
  int INT_LITERAL = 81;
  int REAL_LITERAL = 82;
  int EXPONENT = 83;
  int HEXA = 84;
  int CHAR_LITERAL = 85;
  int STRING_LITERAL = 86;
  int ID = 87;
  int LETTER = 88;
  int DIGIT = 89;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_FORMAL_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;
  int IN_TEXT_DOC = 4;
  int IN_GUIDE = 5;
  int IN_IMPL = 6;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"\\\'\\\'\"",
    "\"{{\"",
    "\"{%\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 15>",
    "\"\\\'\\\'\"",
    "\"}}\"",
    "\"%}\"",
    "\"boolean\"",
    "\"string\"",
    "\"char\"",
    "\"int\"",
    "\"real\"",
    "\"algorithm\"",
    "\"catch\"",
    "\"case\"",
    "\"loop\"",
    "\"true\"",
    "\"class\"",
    "\"as\"",
    "\"constant\"",
    "\"constructor\"",
    "\"continue\"",
    "\"new\"",
    "\"from\"",
    "\"to\"",
    "\"description\"",
    "\"in\"",
    "\"then\"",
    "\"input\"",
    "\"instanceof\"",
    "\"specification\"",
    "\"this\"",
    "\"strategy\"",
    "\"exists\"",
    "\"extends\"",
    "\"false\"",
    "\"end\"",
    "\"global\"",
    "\"do\"",
    "\"until\"",
    "\"implementation\"",
    "\"begin\"",
    "\"implements\"",
    "\"try\"",
    "\"interface\"",
    "\"throw\"",
    "\"method\"",
    "\"while\"",
    "\"null\"",
    "\"object\"",
    "\"operation\"",
    "\"package\"",
    "\"for\"",
    "\"downto\"",
    "\"by\"",
    "\"forall\"",
    "\"post\"",
    "\"pre\"",
    "\"repeat\"",
    "\"return\"",
    "\"output\"",
    "\"switch\"",
    "\"if\"",
    "\"else\"",
    "\"elseif\"",
    "\"finally\"",
    "\"super\"",
    "\"break\"",
    "\"uses\"",
    "<INT_LITERAL>",
    "<REAL_LITERAL>",
    "<EXPONENT>",
    "<HEXA>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\";\"",
    "\",\"",
    "\":\"",
    "\":=\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"->\"",
    "\"[\"",
    "\"]\"",
    "\".?\"",
    "\".??\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"/\"",
    "\"?\"",
    "\"<=>\"",
    "\"=>\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%\"",
    "\"!\"",
    "\"~\"",
    "\"#\"",
    "\"@\"",
    "\"..\"",
    "\"::\"",
  };

}
