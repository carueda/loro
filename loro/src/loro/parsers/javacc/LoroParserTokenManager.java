/* Generated By:JavaCC: Do not edit this line. LoroParserTokenManager.java */
package loro.parsers.javacc;
import loro.arbol.*;
import java.util.*;

public class LoroParserTokenManager implements LoroParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 125:
         return jjMoveStringLiteralDfa1_5(0x20000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x3ffffL) != 0L)
         {
            jjmatchedKind = 88;
            return 56;
         }
         if ((active0 & 0x140L) != 0L || (active1 & 0x40000000000L) != 0L)
            return 2;
         if ((active1 & 0xe000000000L) != 0L || (active2 & 0x8L) != 0L)
            return 6;
         if ((active0 & 0x200L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x20806a084400000L) != 0L || (active1 & 0x800L) != 0L)
            return 56;
         if ((active0 & 0xfdf7f95f7bb80000L) != 0L || (active1 & 0x3f7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 56;
         }
         return -1;
      case 2:
         if ((active0 & 0x302000800400000L) != 0L || (active1 & 0x4cL) != 0L)
            return 56;
         if ((active0 & 0xfcf5ff577fb80000L) != 0L || (active1 & 0x3f7b3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 2;
            }
            return 56;
         }
         return -1;
      case 3:
         if ((active0 & 0x6000111038a00000L) != 0L || (active1 & 0x23030L) != 0L)
            return 56;
         if ((active0 & 0x9ef5ee4747180000L) != 0L || (active1 & 0x1c78bL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 3;
            }
            return 56;
         }
         return -1;
      case 4:
         if ((active0 & 0x1451020042000000L) != 0L || (active1 & 0x18000L) != 0L)
            return 56;
         if ((active0 & 0x8aa4ec4705180000L) != 0L || (active1 & 0x678bL) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 56;
         }
         return -1;
      case 5:
         if ((active0 & 0x8804400004100000L) != 0L || (active1 & 0x2788L) != 0L)
            return 56;
         if ((active0 & 0x2a0ac4701080000L) != 0L || (active1 & 0x4003L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
            return 56;
         }
         return -1;
      case 6:
         if ((active0 & 0x2a02c4701000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
            return 56;
         }
         if ((active0 & 0x800000080000L) != 0L || (active1 & 0x4002L) != 0L)
            return 56;
         return -1;
      case 7:
         if ((active0 & 0x200500000000L) != 0L)
            return 56;
         if ((active0 & 0x2a00c4201000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 56;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000001000000L) != 0L || (active1 & 0x1L) != 0L)
            return 56;
         if ((active0 & 0xa00c4200000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 56;
         }
         return -1;
      case 9:
         if ((active0 & 0x80040000000000L) != 0L)
            return 56;
         if ((active0 & 0x20084200000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
            return 56;
         }
         return -1;
      case 10:
         if ((active0 & 0x4200000000L) != 0L)
            return 56;
         if ((active0 & 0x20080000000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 10;
            return 56;
         }
         return -1;
      case 11:
         if ((active0 & 0x20080000000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 11;
            return 56;
         }
         return -1;
      case 12:
         if ((active0 & 0x80000000000L) != 0L)
            return 56;
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 12;
            return 56;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 129);
      case 37:
         return jjStopAtPos(0, 126);
      case 38:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         return jjStopAtPos(0, 125);
      case 43:
         return jjStopAtPos(0, 123);
      case 44:
         return jjStopAtPos(0, 92);
      case 45:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x0L);
      case 46:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L, 0x8L);
      case 47:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L, 0x10L);
      case 59:
         return jjStopAtPos(0, 91);
      case 60:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140100000000000L, 0x0L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 62:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x680000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 107);
      case 64:
         return jjStopAtPos(0, 130);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 94:
         return jjStopAtPos(0, 113);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x81000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000080000L, 0x10000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x74a200000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8004004000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2c00000000000L, 0x3000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1001000000000L, 0x400cL, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2a0068000400000L, 0x800L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x6000000800000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x201L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x62L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x180L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x280000100000L, 0x8410L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x500112020000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x20000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 105);
      case 126:
         return jjStopAtPos(0, 128);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 38:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 39:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 46:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 58:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 60:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 61:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 63:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100000a000000L, active1, 0x2L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x840004800800000L, active1, 0x180L, active2, 0L);
      case 102:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 56);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400110000200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000041000000L, active1, 0x3000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x212060000400000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 56);
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x714080000L, active1, 0x2cL, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x1L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001020000000L, active1, 0x10040L, active2, 0L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000100000L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x8200L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L, active2, 0L);
      case 123:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 124:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 108);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 122);
         break;
      case 63:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40a00000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000000L, active1, 0x30011L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000001000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000500000000000L, active1, 0x400L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000000L, active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001010080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0020000000000L, active1, 0x8080L);
      case 114:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000100000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x44008000000L, active1, 0x3020L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa10800002000000L, active1, 0x300L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x14008L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x84002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 56);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 56);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8200800000000000L, active1, 0xa080L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000000100000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 56);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x10a0000000080000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 56);
         break;
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000001000000L, active1, 0L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 56);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 56);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400340000000L, active1, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x40400000000L, active1, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4040000000000L, active1, 0x83L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x400L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 56);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000080000L, active1, 0L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80400000000L, active1, 0x2000L);
      case 107:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 56);
         break;
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4008L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x200004001000000L, active1, 0x100L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 56);
         break;
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x600304000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 119:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100080000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 102:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x200080000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 104:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4001000000L, active1, 0L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 56);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x40400000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 56);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 56);
         break;
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 56);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 56);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x1L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 56);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000000L, active1, 0L);
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200080200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 56);
         break;
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0xa0000200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4200000000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 55, 56);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 38, 56);
         break;
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 56);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 43, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 53, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec7 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec14 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 88)
                        kind = 88;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(4);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 12:
                  if (curChar == 39 && kind > 86)
                     kind = 86;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 24:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 28:
                  if (curChar == 34 && kind > 87)
                     kind = 87;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 31:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 39 && kind > 88)
                     kind = 88;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(0, 5);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  else if (curChar == 92)
                     jjAddStates(15, 18);
                  break;
               case 56:
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(15, 18);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(21, 24);
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 56:
               case 39:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(4);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(4);
                  break;
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               case 38:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_6(0x40000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa1_4(0x10000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x2000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   42, 43, 48, 49, 52, 53, 25, 26, 28, 11, 13, 25, 26, 30, 28, 14, 
   15, 17, 19, 8, 9, 27, 29, 31, 33, 46, 47, 50, 51, 54, 55, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            if ((jjbitVec2[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\142\157\157\154\145\141\156", 
"\163\164\162\151\156\147", "\143\150\141\162", "\151\156\164", "\162\145\141\154", 
"\141\154\147\157\162\151\164\150\155", "\143\141\164\143\150", "\144\157\167\156\164\157", "\143\141\163\145", 
"\154\157\157\160", "\164\162\165\145", "\143\154\141\163\163", "\141\163", 
"\143\157\156\163\164\141\156\164", "\143\157\156\163\164\162\165\143\164\157\162", 
"\143\157\156\164\151\156\165\145", "\156\145\167", "\146\162\157\155", "\164\157", 
"\144\145\163\143\162\151\160\164\151\157\156", "\151\156", "\164\150\145\156", "\151\156\160\165\164", 
"\151\156\163\164\141\156\143\145\157\146", "\163\160\145\143\151\146\151\143\141\164\151\157\156", "\164\150\151\163", 
"\163\164\162\141\164\145\147\171", "\145\170\151\163\164\163", "\145\170\164\145\156\144\163", 
"\146\141\154\163\145", "\145\156\144", "\147\154\157\142\141\154", "\144\157", 
"\165\156\164\151\154", "\151\155\160\154\145\155\145\156\164\141\164\151\157\156", 
"\142\145\147\151\156", "\151\155\160\154\145\155\145\156\164\163", "\164\162\171", 
"\151\156\164\145\162\146\141\143\145", "\164\150\162\157\167", "\155\145\164\150\157\144", "\167\150\151\154\145", 
"\156\141\144\141", "\156\165\154\154", "\157\142\152\145\143\164", 
"\157\160\145\162\141\164\151\157\156", "\160\141\143\153\141\147\145", "\146\157\162", "\146\157\162\141\154\154", 
"\163\164\145\160", "\160\157\163\164", "\160\162\145", "\162\145\160\145\141\164", 
"\162\145\164\165\162\156", "\157\165\164\160\165\164", "\163\167\151\164\143\150", "\151\146", 
"\145\154\163\145", "\145\154\163\145\151\146", "\146\151\156\141\154\154\171", 
"\163\165\160\145\162", "\142\162\145\141\153", "\165\163\145\163", null, null, null, null, null, null, 
null, null, null, "\73", "\54", "\72", "\72\75", "\75", "\50", "\51", "\55\76", 
"\133", "\135", "\56\77", "\56\77\77", "\56", "\173", "\175", "\57", "\77", 
"\74\75\76", "\75\76", "\174\174", "\46\46", "\174", "\136", "\46", "\41\75", "\74", "\76", 
"\74\75", "\76\75", "\74\74", "\76\76", "\76\76\76", "\53", "\55", "\52", "\45", "\41", 
"\176", "\43", "\100", "\56\56", "\72\72", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_TEXT_DOC", 
   "IN_GUIDE", 
   "IN_IMPL", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff0001L, 0xfffffffff9cfffffL, 0x1fL, 
};
static final long[] jjtoSkip = {
   0x703eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8fc0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[56];
private final int[] jjstateSet = new int[112];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public LoroParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public LoroParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
